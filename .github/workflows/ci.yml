name: CI

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - '.github/ISSUE_TEMPLATE/**'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - '.github/ISSUE_TEMPLATE/**'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache: true

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v5
        with:
          version: latest
          args: --timeout=5m

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache: true

      - name: Run tests
        run: make test

      - name: Run tests with race detection
        run: make test-race

      - name: Run tests with coverage
        run: go test -coverprofile=coverage.out -covermode=atomic ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: unittests
          fail_ci_if_error: false

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    strategy:
      matrix:
        go-version: ['1.21']
        platform: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Build
        run: make build

      - name: Upload binary
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.platform }}-binary
          path: bin/swagger-to-http*
          retention-days: 5

  docker:
    name: Build Docker image
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and export Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          tags: edgardnogueira/swagger-to-http:test
          outputs: type=docker,dest=/tmp/swagger-to-http-test.tar
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Upload Docker image as artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: /tmp/swagger-to-http-test.tar
          retention-days: 1
